[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "process_video_endpoint",
        "kind": 2,
        "importPath": "ai-service.app",
        "description": "ai-service.app",
        "peekOfCode": "def process_video_endpoint():\n    if 'recording' not in request.files:\n        return jsonify({\"error\": \"No file part in the request\"}), 400\n    file = request.files['recording']\n    if file.filename == '':\n        return jsonify({\"error\": \"No selected file\"}), 400\n    try:\n        # 1. Upload to AssemblyAI\n        headers = {'authorization': ASSEMBLYAI_API_KEY}\n        upload_resp = requests.post(",
        "detail": "ai-service.app",
        "documentation": {}
    },
    {
        "label": "transcription_complete_webhook",
        "kind": 2,
        "importPath": "ai-service.app",
        "description": "ai-service.app",
        "peekOfCode": "def transcription_complete_webhook():\n    data = request.json or {}\n    if data.get('status') != 'completed':\n        return jsonify({\"status\": \"ignored\"}), 200\n    transcript_text = data.get('text', '')\n    try:\n        prompt = f\"\"\"\nBased on the following meeting transcript, please provide:\n1. A concise 3â€“5 bullet summary of key points.\n2. A list of action items with assignees if mentioned.",
        "detail": "ai-service.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "ai-service.app",
        "description": "ai-service.app",
        "peekOfCode": "app = Flask(__name__)\n# --- Configuration (from .env) ---\nASSEMBLYAI_API_KEY = os.getenv(\"ASSEMBLYAI_API_KEY\")\nGEMINI_API_KEY     = os.getenv(\"GEMINI_API_KEY\")\nNGROK_URL          = \"https://592ee92cb980.ngrok-free.app\"\n# Validate config\nif not ASSEMBLYAI_API_KEY or not GEMINI_API_KEY or not NGROK_URL:\n    raise ValueError(\"Please set ASSEMBLYAI_API_KEY, GEMINI_API_KEY, and NGROK_URL in your .env file.\")\nASSEMBLYAI_API_URL = \"https://api.assemblyai.com/v2\"\nGEMINI_API_URL    = (",
        "detail": "ai-service.app",
        "documentation": {}
    },
    {
        "label": "ASSEMBLYAI_API_KEY",
        "kind": 5,
        "importPath": "ai-service.app",
        "description": "ai-service.app",
        "peekOfCode": "ASSEMBLYAI_API_KEY = os.getenv(\"ASSEMBLYAI_API_KEY\")\nGEMINI_API_KEY     = os.getenv(\"GEMINI_API_KEY\")\nNGROK_URL          = \"https://592ee92cb980.ngrok-free.app\"\n# Validate config\nif not ASSEMBLYAI_API_KEY or not GEMINI_API_KEY or not NGROK_URL:\n    raise ValueError(\"Please set ASSEMBLYAI_API_KEY, GEMINI_API_KEY, and NGROK_URL in your .env file.\")\nASSEMBLYAI_API_URL = \"https://api.assemblyai.com/v2\"\nGEMINI_API_URL    = (\n    f\"https://generativelanguage.googleapis.com/v1beta/models/\"\n    f\"gemini-1.5-flash-latest:generateContent?key={GEMINI_API_KEY}\"",
        "detail": "ai-service.app",
        "documentation": {}
    },
    {
        "label": "ASSEMBLYAI_API_URL",
        "kind": 5,
        "importPath": "ai-service.app",
        "description": "ai-service.app",
        "peekOfCode": "ASSEMBLYAI_API_URL = \"https://api.assemblyai.com/v2\"\nGEMINI_API_URL    = (\n    f\"https://generativelanguage.googleapis.com/v1beta/models/\"\n    f\"gemini-1.5-flash-latest:generateContent?key={GEMINI_API_KEY}\"\n)\n# === ENDPOINTS ===\n@app.route('/process-video', methods=['POST'])\ndef process_video_endpoint():\n    if 'recording' not in request.files:\n        return jsonify({\"error\": \"No file part in the request\"}), 400",
        "detail": "ai-service.app",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "node_modules.flatted.python.flatted",
        "description": "node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "node_modules.flatted.python.flatted",
        "description": "node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "node_modules.flatted.python.flatted",
        "description": "node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "node_modules.flatted.python.flatted",
        "description": "node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "node_modules.flatted.python.flatted",
        "documentation": {}
    }
]